<?xml version="1.0" encoding="UTF-8"?>
<configuration>

  <springProperty scope="context" name="applicationName" source="spring.application.name"/>
<!--  <springProperty scope="context" name="ENV" source="spring.profiles.active" defaultValue="prod"/>-->
  <springProperty scope="context" name="springAppName" source="spring.application.name"/>
<!--  <conversionRule conversionWord="hostAddress" converterClass="com.trigram.logger.converter.HostAddressConvert" />-->
  <springProperty scope="context" name="ROOT_PACKAGE" source="trigram.logger.logging.package.root" defaultValue="com"/>
  <property name="LOG_PATH" value="/opt/data1/${applicationName}/logs"/>
  <!--spring-boot logging.file-->
  <property name="LOG_FILE" value="${LOG_PATH}/${LOG_FILE:-spring.log}"/>

  <!-- 控制台日志 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
		</filter>
		<encoder>
      <!--<pattern>${CONSOLE_LOG_PATTERN}</pattern>-->
      <pattern>%d{HH:mm:ss.SSS} requestId:%X{requestId} %boldYellow([%thread]) %highlight([%5level]) %cyan([%50logger{50}]) - %msg%n</pattern>
      <charset>UTF-8</charset>
		</encoder>
	</appender>

  <!-- INFO日志 -->
	<appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，可以避免输出 Error 的日志-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 Error-->
			<level>ERROR</level>
			<!--匹配到就禁止-->
			<onMatch>DENY</onMatch>
			<!--没有匹配到就允许-->
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
			<FileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/info.created_on_%d{yyyy-MM-dd}.part_%i.log</FileNamePattern>
			<!--只保留最近90天的日志-->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
			<!--<totalSizeCap>1GB</totalSizeCap>-->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
      <!--<pattern>${FILE_LOG_PATTERN}</pattern>-->
      <pattern>
        {
        "time": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
        "logTime": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
        "level": "%level",
        "project": "${springAppName:-}",
        "thread": "%thread",
<!--        "serverIp": "%hostAddress",-->
        "requestId": "%X{requestId:-}",
        "catRootId": "%X{X-CAT-ROOT-ID:-}",
        "catParentId": "%X{X-CAT-PARENT-ID:-}",
        "catId": "%X{X-CAT-ID:-}",
        "appId": "%X{appId:-}",
        "client_ip": "%X{client_ip:-}",
        "class": "%logger",
        "line": "%line",
        "message": "%message",
        "stack_trace": "%exception:-"
        }
      </pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>
  <appender name="ASYNC_FILE_INFO" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <!--以每个日志内容0.5KB大小为基础，大约允许缓存1MB的日志。-->
    <queueSize>2000</queueSize>
    <!--单位为毫秒 -->
    <maxFlushTime>500</maxFlushTime>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="FILE_INFO"/>
  </appender>

  <!-- ERROR日志 -->
	<appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>Error</level>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
			<FileNamePattern>${LOG_PATH}/alarm/error.created_on_%d{yyyy-MM-dd}.part_%i.log</FileNamePattern>
			<!--只保留最近90天的日志-->
			<maxHistory>90</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
      <!--<pattern>${FILE_ERROR_PATTERN}</pattern>-->
      <pattern>
        {
        "time": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
        "logTime": "%d{yyyy-MM-dd HH:mm:ss.SSS}",
        "level": "%level",
        "project": "${springAppName:-}",
        "thread": "%thread",
<!--        "serverIp": "%hostAddress",-->
        "requestId": "%X{requestId:-}",
        "catRootId": "%X{X-CAT-ROOT-ID:-}",
        "catParentId": "%X{X-CAT-PARENT-ID:-}",
        "catId": "%X{X-CAT-ID:-}",
        "appId": "%X{appId:-}",
        "client_ip": "%X{client_ip:-}",
        "class": "%logger",
        "line": "%line",
        "message": "%message",
        "stack_trace": "%exception:-"
        }
      </pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>
  <appender name="ASYNC_FILE_ERROR" class="ch.qos.logback.classic.AsyncAppender">
    <discardingThreshold>0</discardingThreshold>
    <!--以每个日志内容0.5KB大小为基础，大约允许缓存1MB的日志。-->
    <queueSize>2000</queueSize>
    <!--单位为毫秒 -->
    <maxFlushTime>500</maxFlushTime>
    <includeCallerData>true</includeCallerData>
    <appender-ref ref="FILE_ERROR"/>
  </appender>

	<root name="${ROOT_PACKAGE}" level="INFO" additivity="false">
		<appender-ref ref="CONSOLE"/>
		<appender-ref ref="ASYNC_FILE_INFO"/>
		<appender-ref ref="ASYNC_FILE_ERROR"/>
	</root>
</configuration>
